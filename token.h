#ifndef MYLISPC_TOKEN_H
#define MYLISPC_TOKEN_H

#include"zlt/string.h"

enum {
  MYLISPC_EOF_TOKEN,
  MYLISPC_EOL_TOKEN,
  MYLISPC_ID_TOKEN,
  MYLISPC_NUM_TOKEN,
  MYLISPC_STR_TOKEN,
  // keywords begin
  MYLISPC_CALLEE_TOKEN,
  MYLISPC_DEF_TOKEN,
  MYLISPC_DEFER_TOKEN,
  MYLISPC_FORWARD_TOKEN,
  MYLISPC_GUARD_TOKEN,
  MYLISPC_IF_TOKEN,
  MYLISPC_LENGTH_TOKEN,
  MYLISPC_RETURN_TOKEN,
  MYLISPC_THROW_TOKEN,
  MYLISPC_TRY_TOKEN,
  // keywords end
  // preproc operations begin
  MYLISPC_POUND_TOKEN,
  MYLISPC_POUND2_TOKEN,
  MYLISPC_POUND_DEF_TOKEN,
  MYLISPC_POUND_IF_TOKEN,
  MYLISPC_POUND_INCLUDE_TOKEN,
  MYLISPC_POUND_LINE_TOKEN,
  MYLISPC_POUND_MOVE_TOKEN,
  MYLISPC_POUND_POP_TOKEN,
  MYLISPC_POUND_PUSH_TOKEN,
  MYLISPC_POUND_UNDEF_TOKEN,
  // preproc operations end
  // symbols begin
  MYLISPC_EXCLAM_TOKEN,
  MYLISPC_PERCENT_TOKEN,
  MYLISPC_AMP2_TOKEN,
  MYLISPC_AMP_TOKEN,
  MYLISPC_LPAREN_TOKEN,
  MYLISPC_RPAREN_TOKEN,
  MYLISPC_ASTERISK2_TOKEN,
  MYLISPC_ASTERISK_TOKEN,
  MYLISPC_PLUS_TOKEN,
  MYLISPC_COMMA_TOKEN,
  MYLISPC_MINUS_TOKEN,
  MYLISPC_DOT_TOKEN,
  MYLISPC_SLASH_TOKEN,
  MYLISPC_LT2_TOKEN,
  MYLISPC_LT_EQ_GT_TOKEN,
  MYLISPC_LT_EQ_TOKEN,
  MYLISPC_LT_TOKEN,
  MYLISPC_EQ2_TOKEN,
  MYLISPC_EQ_TOKEN,
  MYLISPC_GT_EQ_TOKEN,
  MYLISPC_GT3_TOKEN,
  MYLISPC_GT2_TOKEN,
  MYLISPC_GT_TOKEN,
  MYLISPC_AT_TOKEN,
  MYLISPC_CARET2_TOKEN,
  MYLISPC_CARET_TOKEN,
  MYLISPC_VERTICAL2_TOKEN,
  MYLISPC_VERTICAL_TOKEN,
  MYLISPC_TILDE_TOKEN
  // symbols end
};

/// @param[out] numVal store number literal value when number token
/// @return token
int mylispcTokenOfRaw(double *numVal, zltString raw);

/// @return raw when keyword/preproc-operation/symbol token
zltString mylispcRawOfToken(int token);

#endif
